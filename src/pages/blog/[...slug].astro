---
import { render } from "astro:content";

import { getPosts } from "../../lib/content";
import BlogPost from "../../layouts/BlogPost.astro";
import {ui} from "../../lib/ui"

export async function getStaticPaths() {
	const posts = await getPosts();
	return posts.map((post) => ({
		params: { slug: post.id },
		props: post,
	}));
}

const post = await Astro.props;
const { Content, headings } = await render(post);
const base=headings[0].depth
const indentMap = {
  0: 'indent-0',
  1: 'indent-2',
  2: 'indent-4',
  3: 'indent-6',
  4: 'indent-8',
};
const formatHeadings=headings.map(h=>({...h,indentClass:indentMap[2*(h.depth-base)]}))
---
<BlogPost id= {post.id} {...post.data}>
	<nav slot="toc" class="fixed md:max-w-[calc((100vw_-_768px)/2_-_1.5rem)]">
		<header>
			<h2 class="text-xl font-bold">{ui.posts_toc}</h2>
		</header>
		<ul>
		{formatHeadings.map(h=>(<li><a href=`#${h.slug}` class=`block border-r-2 pl-4 pr-2 py-2 text-sm ${h.indentClass}`>{h.text}</a></li>))}
		</ul>
	</nav>
	<Content />
	<script>
		type TocLink = HTMLAnchorElement;
		type TocHeading = HTMLElement;
		const selector='li a'
		const activeClass=['bg-[var(--md-sys-color-secondary-container)]', 'text-[var(--md-sys-color-on-secondary-container)]','border-[var(--md-sys-color-secondary)]']

		// 滚动事件监听器
		window.addEventListener('scroll', throttle(updateActiveSection, 100));

		function updateActiveSection(): void {
			const headingElements: NodeListOf<TocHeading> = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
			let current: string | null = null;

			headingElements.forEach((heading: TocHeading) => {
				const headingTop = heading.getBoundingClientRect().top;
				if (headingTop >= -100 && (!current || headingTop < (document.getElementById(current)?.getBoundingClientRect().top ?? Infinity))) {
					current = heading.id;
				}
  			});

			const tocLinks: NodeListOf<TocLink> = document.querySelectorAll(selector);

			tocLinks.forEach((link: TocLink) => link.classList.remove(...activeClass));
			if (current) {
				const activeLink: TocLink | null = document.querySelector(`li a[href="#${current}"]`);
				if (activeLink) {
					activeLink.classList.add(...activeClass);
				}
 		 	}

			const activeHeadingId = current;
			headings.forEach(heading => {
				heading.isActive = heading.slug === activeHeadingId;
			});
		}

		// 节流函数
		function throttle(fn: () => void, wait: number): () => void {
			let time = Date.now();
			return () => {
				if ((time + wait - Date.now()) < 0) {
					fn();
					time = Date.now();
				}
			};
		}
	</script>
</BlogPost>
